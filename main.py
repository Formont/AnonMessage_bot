from aiogram import Bot, executor, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.deep_linking import get_start_link, decode_payload
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from config import TOKEN

cancelMarkup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É‚ùå", callback_data="cancel")]])

class States(StatesGroup):
    message = State()

bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

async def get_id(call: CallbackQuery, state: FSMContext):
    id = int(call.data.split("_")[1])
    await call.message.answer("_üòô –û—Ç–ø—Ä–∞–≤—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é_\n\n*–ù–∞–ø–∏—à–∏ c—é–¥–∞ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –µ–≥–æ –ø–æ–ª—É—á–∏—Ç, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ –æ–Ω–æ.*\n\n_üìù –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç_", parse_mode='markdown', reply_markup=cancelMarkup)
    await States.message.set()
    async with state.proxy() as data:
        data['id'] = id

@dp.message_handler(commands="start", state="*")
async def cmd_start(message: Message, state: FSMContext):
    await state.finish()
    args = message.get_args()
    if args == "" or args is None:
        link = await get_start_link(message.from_user.id, encode=True)
        await message.answer(f"üòÄ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–≥–æ <b>–∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</b> –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–µ–±–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º.\n\nüîó–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}", parse_mode='html')
    else:
        id = decode_payload(args)
        if int(id) != message.from_user.id:
            await message.answer("_üòô –û—Ç–ø—Ä–∞–≤—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é_\n\n*–ù–∞–ø–∏—à–∏ c—é–¥–∞ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –µ–≥–æ –ø–æ–ª—É—á–∏—Ç, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ –æ–Ω–æ.*\n\n_üìù –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç_", parse_mode='markdown',
                                 reply_markup=cancelMarkup)
            await States.message.set()
            async with state.proxy() as data:
                data["id"] = id
        else:
            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("üîó–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="get_link")]])
            await message.answer("*ü§¶‚Äç‚ôÄÔ∏è –ü–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ - –≥–ª—É–ø–æ.*\n\n–õ—É—á—à–µ —Ä–∞–∑–º–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –≤ —Å—Ç–æ—Ä–∏–∑ –∏–ª–∏ —É —Å–µ–±—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ *Instagram/Telegram/VK/TikTok*, –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∑–∞—Å—Ç–∞–≤—è—Ç —Å–µ–±—è –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å üòâ", parse_mode='markdown', reply_markup=markup)

@dp.message_handler(state=States.message, content_types=['animation', 'audio', 'contact', 'dice', 'document', 'location', 'photo', 'poll', 'sticker', 'text', 'venue', 'video', 'video_note', 'voice'])
async def send_handler(message: Message, state: FSMContext):
    async with state.proxy() as data:
        id = data["id"]
    markup = InlineKeyboardMarkup(1)
    sendButton = InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æüîÅ", callback_data=f"send_{id}")
    markup.add(sendButton)
    get_markup = InlineKeyboardMarkup(1)
    answerButton = InlineKeyboardButton("‚úâÔ∏è–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{message.from_user.id}")
    get_markup.add(answerButton)
    await bot.send_message(id, f"*üí¨–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* #{message.from_user.id}", parse_mode="markdown")
    await bot.copy_message(id, message.from_user.id, message.message_id, reply_markup=get_markup)
    await message.answer("*üí¨–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ*\n\n_–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?_", parse_mode="markdown", reply_markup=markup)
    await state.finish()

@dp.callback_query_handler(text_contains="send_")
async def cb_send_again(call: CallbackQuery, state: FSMContext):
    await get_id(call, state)

@dp.callback_query_handler(text_contains="answer_")
async def cb_answer(call: CallbackQuery, state: FSMContext):
    await get_id(call, state)
        
@dp.callback_query_handler(text="cancel", state="*")
async def cb_cancel(call: CallbackQuery, state: FSMContext):
   await call.message.delete()
   await state.finish()

@dp.callback_query_handler(text="get_link", state="*")
async def cb_get_link(call: CallbackQuery, state: FSMContext):
    link = await get_start_link(call.from_user.id, encode=True)
    await call.message.answer(f"üòÄ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–≥–æ <b>–∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</b> –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–µ–±–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º.\n\nüîó–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}", parse_mode='html')

@dp.message_handler(lambda msg: True)
async def echo(message: Message, state: FSMContext):
    await cmd_start(message, state)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

